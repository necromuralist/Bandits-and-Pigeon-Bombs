<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bandits &amp; Pigeon Bombs (Posts by Brunhilde)</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/</link><description></description><atom:link href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/authors/brunhilde.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 16 Jul 2021 22:14:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Epsilon Greedy with Normal-Distribution Payouts</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/Epsilon-Greedy-with-Normal-Distribution-Payouts/</link><dc:creator>Brunhilde</dc:creator><description>&lt;section id="epsilon-greedy"&gt;
&lt;h2&gt;1 Epsilon Greedy&lt;/h2&gt;
&lt;p&gt;Since the Optimistic Initial Values agent can't use the Bernoulli Arm, I'm creating a version of the Epsilon Greedy Optimized that expects the &lt;code class="docutils literal"&gt;arms&lt;/code&gt; to be the population-mean for their payouts and the &lt;code class="docutils literal"&gt;pull_arm&lt;/code&gt; will return a set of normally-distributed around that mean.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-1" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-2" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-3" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-4" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-5" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-6" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-6"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jitclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-7" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpsilonGreedyNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-8" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-8"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The Epsilon Greedy Algorithm With Normal Arm&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-9" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-10" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-11" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     epsilon (float): fraction of the time to explore&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-12" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (list): collection of probabilities for bandit arm&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-13" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-13"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-14" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-14"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-15" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-15"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-16" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-16"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-17" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-18" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-18"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-19" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-20" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-21" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-22" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-22"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-23" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-24" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-24"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-25" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a4e5a2888f34bc9a3654cd549b36747-26" name="rest_code_3a4e5a2888f34bc9a3654cd549b36747-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;section id="optimized-imports"&gt;
&lt;h3&gt;1.1 Optimized Imports&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-1" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-2" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-3" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-4" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jitclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-5" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-6" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;a id="rest_code_873ac6cfb1f745398e6223c6e876cd70-7" name="rest_code_873ac6cfb1f745398e6223c6e876cd70-7"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-spec"&gt;
&lt;h3&gt;1.2 The Spec&lt;/h3&gt;
&lt;p&gt;This is how you tell numba what attributes the class will have.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-1" name="rest_code_791250c3d7e04dcf8834928c956d573d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-2" name="rest_code_791250c3d7e04dcf8834928c956d573d-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"epsilon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-3" name="rest_code_791250c3d7e04dcf8834928c956d573d-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"arms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-4" name="rest_code_791250c3d7e04dcf8834928c956d573d-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-5" name="rest_code_791250c3d7e04dcf8834928c956d573d-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rewards"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-6" name="rest_code_791250c3d7e04dcf8834928c956d573d-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"total_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a id="rest_code_791250c3d7e04dcf8834928c956d573d-7" name="rest_code_791250c3d7e04dcf8834928c956d573d-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-constructor"&gt;
&lt;h3&gt;1.3 The Constructor&lt;/h3&gt;
&lt;p&gt;The constructor takes two arguments - &lt;em&gt;epsilon&lt;/em&gt; and &lt;em&gt;arms&lt;/em&gt;. The &lt;em&gt;arms&lt;/em&gt; list should contain the mean payout for each arm.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-1" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-2" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-3" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-4" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-5" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-6" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-7" name="rest_code_5e6e2d9c49b845aa80e625ca237cdf77-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="reset"&gt;
&lt;h3&gt;1.4 Reset&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-1" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-2" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts, rewards, total_reward to 0s&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-3" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-4" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-5" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-6" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-7" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-8" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_9a32cc1ac8374d3da26f678e2257e446-9" name="rest_code_9a32cc1ac8374d3da26f678e2257e446-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="best-arm"&gt;
&lt;h3&gt;1.5 Best Arm&lt;/h3&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;best_arm&lt;/code&gt; property returns the index of the arm that has the highest average reward so far. It returns the index instead of the arm itself because it's used to get the matching counts and rewards in the &lt;code class="docutils literal"&gt;update&lt;/code&gt; method. Since I'm using the &lt;code class="docutils literal"&gt;jitclass&lt;/code&gt; decorator I'm going to get rid of &lt;code class="docutils literal"&gt;first_find&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-1" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-2" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;best_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-3" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Index of the arm with the most reward"""&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-4" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-5" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-6" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-7" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;a id="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-8" name="rest_code_58ec7b44d24a4f4e8f115f6cfcdf175e-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="select-arm"&gt;
&lt;h3&gt;1.6 Select Arm&lt;/h3&gt;
&lt;p&gt;This differs from the other Epsilon Greedy code only in that I'm using numpy instead of python for the random function.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-1" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-2" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""chooses the next arm to update&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-3" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-4" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-5" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     int: index of the next arm to pull&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-6" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-7" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-8" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_2178f974d4524e0ab8b9d2d7e496125c-9" name="rest_code_2178f974d4524e0ab8b9d2d7e496125c-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_arm&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="pull-arm"&gt;
&lt;h3&gt;1.7 Pull Arm&lt;/h3&gt;
&lt;p&gt;Since we can't give user-defined objects as attributes of the class, this version will be both algorithm and bandit. This is what's different from the other Epsilon Greedy algorithms in that we're returning the arm's mean plus a random number from the normal distribution. If numba allowed us to pass in objects maybe we could have just switched out bandits. I need to look into how to make that work.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-1" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-2" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""gets the reward&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-3" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-4" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-5" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index for the arm-probability array&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-6" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-7" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: reward&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-8" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_c27c7cbd42174f5e9fa7974b4680b822-9" name="rest_code_c27c7cbd42174f5e9fa7974b4680b822-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="update"&gt;
&lt;h3&gt;1.8 Update&lt;/h3&gt;
&lt;p&gt;The update method pulls the arm whose index it is given and then updates the count and reward. Here we're calling the &lt;code class="docutils literal"&gt;pull_arm&lt;/code&gt; method instead of using a &lt;code class="docutils literal"&gt;BernoulliArm&lt;/code&gt; so we can't re-use the original method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-1" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-2" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the value&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-3" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-4" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-5" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-6" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-7" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-8" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-9" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-10" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-11" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-11"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-12" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-12"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-13" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-13"&gt;&lt;/a&gt;                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_d63429c056ca4a82bef2cf5adab38f77-14" name="rest_code_d63429c056ca4a82bef2cf5adab38f77-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;/section&gt;</description><category>bandits reinforcementLearning</category><guid>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/Epsilon-Greedy-with-Normal-Distribution-Payouts/</guid><pubDate>Wed, 02 Aug 2017 01:48:00 GMT</pubDate></item><item><title>Optimistic Initial Values</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/Optimistic-Initial-Values/</link><dc:creator>Brunhilde</dc:creator><description>&lt;div&gt;&lt;section id="introduction"&gt;
&lt;h2&gt;1 Introduction&lt;/h2&gt;
&lt;p&gt;This is one possible to the n-armed bandit problem. It is similar to the &lt;em&gt;Epsilon Greedy&lt;/em&gt; algorithm except that instead of using a conditional to decide whether to explore or exploit, the algorithm sets the estimated (mean) payout for each arm to 1 (the theoretical maximum for our case) and then always exploits. As things proceed, the arms will settle down to their actual payoff-rates and those that haven't been explored will be chosen because they are still too high.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-tangle"&gt;
&lt;h2&gt;2 The Tangle&lt;/h2&gt;
&lt;p&gt;This is the no-web template to build the final file.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-1" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-2" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-3" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-4" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-5" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;declaration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-6" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-7" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-7"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-8" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-9" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-9"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-10" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-11" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-11"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-12" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-13" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-13"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-14" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_f33bc97a0cae4da8ac677783e9174c9f-15" name="rest_code_f33bc97a0cae4da8ac677783e9174c9f-15"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="imports"&gt;
&lt;h2&gt;3 Imports&lt;/h2&gt;
&lt;p&gt;These are our external dependencies.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_b108e5fc89504addbe32fd80f97dc73a-1" name="rest_code_b108e5fc89504addbe32fd80f97dc73a-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jitclass&lt;/span&gt;
&lt;a id="rest_code_b108e5fc89504addbe32fd80f97dc73a-2" name="rest_code_b108e5fc89504addbe32fd80f97dc73a-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;a id="rest_code_b108e5fc89504addbe32fd80f97dc73a-3" name="rest_code_b108e5fc89504addbe32fd80f97dc73a-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-spec"&gt;
&lt;h2&gt;4 The Spec&lt;/h2&gt;
&lt;p&gt;In order to use numba with the &lt;code class="docutils literal"&gt;OptimisticInitialValues&lt;/code&gt; class you have to create a 'spec' that tells numba what the data-types are for each of its fields.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-1" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SPEC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-2" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"arms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-3" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-4" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rewards"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-5" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"total_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-6" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"initial_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a id="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-7" name="rest_code_ae9a87a28cb7425ebfdb7ca95608eac6-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-class-declaration"&gt;
&lt;h2&gt;5 The Class Declaration&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-1" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jitclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPEC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-2" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OptimisticInitialValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-3" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Optimistic Initial Values greedy algorithm&lt;/span&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-4" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-5" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-6" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array[float]: payout-probabilities for each arm&lt;/span&gt;
&lt;a id="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-7" name="rest_code_e4dd2e7aa0bb48c680f8e6a4dc2abc6d-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-constructor"&gt;
&lt;h2&gt;6 The Constructor&lt;/h2&gt;
&lt;p&gt;Here's our first change from the epsilon-greedy algorithm. We no longer have an &lt;code class="docutils literal"&gt;epsilon&lt;/code&gt; value and instead of initializing the &lt;code class="docutils literal"&gt;rewards&lt;/code&gt; as zeros we initialize them with an 'initial' reward. Also, although you can't see it here, the arms have to be a list of mean payout values (see the &lt;code class="docutils literal"&gt;pull_arm&lt;/code&gt; method below).&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_ce595577468542b38b9d910247910ece-1" name="rest_code_ce595577468542b38b9d910247910ece-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-2" name="rest_code_ce595577468542b38b9d910247910ece-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-3" name="rest_code_ce595577468542b38b9d910247910ece-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-4" name="rest_code_ce595577468542b38b9d910247910ece-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-5" name="rest_code_ce595577468542b38b9d910247910ece-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-6" name="rest_code_ce595577468542b38b9d910247910ece-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a id="rest_code_ce595577468542b38b9d910247910ece-7" name="rest_code_ce595577468542b38b9d910247910ece-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="select-arm"&gt;
&lt;h2&gt;7 Select Arm&lt;/h2&gt;
&lt;p&gt;This chooses the next arm. Unlike the epsilon-greedy algorithm it will always pick the 'best' arm, choosing the first if there is a tie. Since the whole class is in the jit I'm also not using the external &lt;code class="docutils literal"&gt;find_first&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-1" name="rest_code_3430137df6a847e082d7d823c0713f26-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-2" name="rest_code_3430137df6a847e082d7d823c0713f26-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Index of the arm with the most reward&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-3" name="rest_code_3430137df6a847e082d7d823c0713f26-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-4" name="rest_code_3430137df6a847e082d7d823c0713f26-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-5" name="rest_code_3430137df6a847e082d7d823c0713f26-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     integer: index of arm with highest average reward&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-6" name="rest_code_3430137df6a847e082d7d823c0713f26-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-7" name="rest_code_3430137df6a847e082d7d823c0713f26-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-8" name="rest_code_3430137df6a847e082d7d823c0713f26-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-9" name="rest_code_3430137df6a847e082d7d823c0713f26-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a id="rest_code_3430137df6a847e082d7d823c0713f26-10" name="rest_code_3430137df6a847e082d7d823c0713f26-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="pull-arm"&gt;
&lt;h2&gt;8 Pull Arm&lt;/h2&gt;
&lt;p&gt;This gets the reward for the arm. with a Bernoulli arm, there's a chance that an arm will be set to 0 on its first pull, at which point you will never explore it (since there's no exploration), so even the best arm might get wiped out. To fix this you need a different scheme. This one uses a population mean (selected &lt;code class="docutils literal"&gt;from self.arms&lt;/code&gt;) which has noise added by selecting from the standard normal distribution.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-1" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-2" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""gets the reward&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-3" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-4" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-5" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index for the arm population-mean array&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-6" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-7" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: payout for the arm&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-8" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-9" name="rest_code_82cd3f89623c4c8d81fe6725cc9b53df-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="update-arm"&gt;
&lt;h2&gt;9 Update Arm&lt;/h2&gt;
&lt;p&gt;This pulls the arm and updates the reward. This works the same as the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;epsilon-greedy&lt;/span&gt;&lt;/code&gt; version does.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-1" name="rest_code_edb0e045250248a59da8175eaa464895-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-2" name="rest_code_edb0e045250248a59da8175eaa464895-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the average reward&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-3" name="rest_code_edb0e045250248a59da8175eaa464895-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-4" name="rest_code_edb0e045250248a59da8175eaa464895-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    also updates the total_reward the algorithm has earned so far&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-5" name="rest_code_edb0e045250248a59da8175eaa464895-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-6" name="rest_code_edb0e045250248a59da8175eaa464895-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-7" name="rest_code_edb0e045250248a59da8175eaa464895-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-8" name="rest_code_edb0e045250248a59da8175eaa464895-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-9" name="rest_code_edb0e045250248a59da8175eaa464895-9"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-10" name="rest_code_edb0e045250248a59da8175eaa464895-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-11" name="rest_code_edb0e045250248a59da8175eaa464895-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-12" name="rest_code_edb0e045250248a59da8175eaa464895-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-13" name="rest_code_edb0e045250248a59da8175eaa464895-13"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-14" name="rest_code_edb0e045250248a59da8175eaa464895-14"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-15" name="rest_code_edb0e045250248a59da8175eaa464895-15"&gt;&lt;/a&gt;                         &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_edb0e045250248a59da8175eaa464895-16" name="rest_code_edb0e045250248a59da8175eaa464895-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="reset"&gt;
&lt;h2&gt;10 Reset&lt;/h2&gt;
&lt;p&gt;This resets the values so that you can re-use the algorithm. As with the constructor, it sets the &lt;code class="docutils literal"&gt;rewards&lt;/code&gt; to all ones instead of zeros as was the case with the epsilon-greedy algorithm.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-1" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-2" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts, rewards, total_reward to 0s&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-3" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-4" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-5" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-6" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-7" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-8" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-9" name="rest_code_dd4f26630ef145d4a8fa43a2217d41eb-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;</description><category>bandits reinforcementLearning</category><guid>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/Optimistic-Initial-Values/</guid><pubDate>Wed, 02 Aug 2017 01:47:00 GMT</pubDate></item></channel></rss>