<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bandits &amp; Pigeon Bombs (Posts about algorithm)</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/</link><description></description><atom:link href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/categories/algorithm.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 16 Jul 2021 22:14:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Finding the Best Epsilon</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#introduction" id="id1"&gt;1 Introduction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#imports" id="id2"&gt;2 Imports&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#set-up-the-plotting" id="id3"&gt;3 Set-up the Plotting&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#the-probabilities" id="id4"&gt;4 The Probabilities&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#generate-the-probabilities" id="id5"&gt;4.1 Generate the Probabilities&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#inspecting-the-outcome" id="id6"&gt;4.2 Inspecting the Outcome&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#average-reward" id="id7"&gt;5 Average Reward&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#cumulative-reward" id="id8"&gt;6 Cumulative Reward&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#imbalanced-case" id="id9"&gt;6.1 Imbalanced Case&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id1"&gt;1 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the ways to characterize the performance of the &lt;em&gt;Epsilon Greedy&lt;/em&gt; agent using our &lt;em&gt;Bernoulli Arm&lt;/em&gt;. We are going to look at three ways to evaluate how well the algorithm does.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;probability of using the best arm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;average reward&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cumulative reward&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="imports"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id2"&gt;2 Imports&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 19)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    # python standard library
    import random
    from datetime import datetime

    # pypi
    from numba import jit
    import numpy
    import pandas
    import matplotlib.pyplot as plot
    import seaborn

    # this project
    from epsilon_greedy import (
        EpsilonGreedy,
        find_first
    )
    from epsilon_greedy_optimized import EpsilonGreedyOptimized
    from bernoulli_arm import BernoulliArm
&lt;/pre&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="set-up-the-plotting"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id3"&gt;3 Set-up the Plotting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will enable the plotting and set the style.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 45)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    %matplotlib inline
    seaborn.set_style("whitegrid")
&lt;/pre&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="the-probabilities"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id4"&gt;4 The Probabilities&lt;/a&gt;&lt;/h2&gt;
&lt;section id="generate-the-probabilities"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id5"&gt;4.1 Generate the Probabilities&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This code will run generate the probabilities. Although I made it so that using the &lt;code class="docutils literal"&gt;EpsilonGreedy&lt;/code&gt; call method would both choose the arm and update the reward, in this case we need to know which arm was selected so I'm going to do the steps individually.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 58)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    def generate_probabilities(times=1000, trials=100):
        """this generates the probabilites for finding the best arm

        Args:
         trials (int): number of times to train the agent
         times (int): length of time to train the agent
        Returns:
         Dict: the probabilites for each epsilon over time
         """
        arm_probabilities = [0.1, 0.1, 0.1, 0.9, 0.1]
        random.shuffle(arm_probabilities)
        best_arm = arm_probabilities.index(max(arm_probabilities))
        arms = [BernoulliArm(probability) for probability in arm_probabilities]
        epsilons = numpy.array([0.05, 0.1, 0.2, 0.3, 0.4, 0.5])

        outcomes = {}
        for epsilon in epsilons:
            agent = EpsilonGreedy(epsilon, arms)
            probabilities = numpy.zeros(times)
            for trial in range(trials):
                for time in range(times):
                    arm = agent.select_arm()
                    agent.update(arm)
                    if arm == best_arm:
                        probabilities[time] += 1
                agent.reset()
            outcomes["Epsilon {:.02f}".format(epsilon)] = probabilities/times
        return outcomes
&lt;/pre&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="inspecting-the-outcome"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id6"&gt;4.2 Inspecting the Outcome&lt;/a&gt;&lt;/h3&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 92)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    TRIALS = 5000
    TIMES = 400
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 97)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    start = datetime.now()
    probabilities = generate_probabilities(trials=TRIALS, times=TIMES)
    print("Run Time: {0}".format(datetime.now() - start))
    probabilities = pandas.DataFrame.from_dict(probabilities)
    probabilities.describe()
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;       Epsilon 0.05  Epsilon 0.10  Epsilon 0.20  Epsilon 0.30  Epsilon 0.40  \
count    400.000000    400.000000    400.000000    400.000000    400.000000
mean       8.784956      9.971200      9.801344      9.084844      8.235194
std        3.064916      2.523568      1.775677      1.319447      0.998305
min        0.120000      0.275000      0.495000      0.757500      1.050000
25%        7.141875      9.740000     10.264375      9.390000      8.409375
50%        9.937500     11.187500     10.456250      9.475000      8.480000
75%       11.225000     11.457500     10.515000      9.530625      8.545000
max       11.720000     11.605000     10.727500      9.665000      8.712500

       Epsilon 0.50
count    400.000000
mean       7.310087
std        0.763259
min        1.190000
25%        7.406875
50%        7.473750
75%        7.535625
max        7.725000&lt;/pre&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 127)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    probabilities.to_csv("epsilon_greedy_accuracy.csv")
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 131)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    figure = plot.figure(figsize=(10, 6))
    axe = figure.gca()
    axe.set_title("Accuracy of the Epsilon Greedy Algorithm ({} trials)".format(TRIALS))
    axe.set_xlabel("Time (number of pulls on the arm)")
    axe.set_ylabel("Probability of retrieving the best arm")
    probabilities.plot(ax=axe)
&lt;/pre&gt;
&lt;/div&gt;
&lt;img alt="epsilon_greedy_probablilities.png" src="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/epsilon_greedy_probablilities.png"&gt;
&lt;p&gt;Looking at the plots, it appears that the epsilons greater than 0.05 converge faster that 0.05 (their curves are steeper at the beginning), as you would expect, but they also don't do as well in the long run, as you might also expect, since they're doing more exploration. In the long run, the more exploitation, the better the profit, but I suppose it depends on the window you have to work with, if you have a short one, then the more aggresive explorers might be better. Anything less than 350 would do better with 0.1 rather than 0.05, for instance.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="average-reward"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id7"&gt;5 Average Reward&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things to note about the previous trials is that there was one arm that did notably better than all the others. When they are more uniform using the probability of retrieving the best arm might not be as revealing. Instead, using the average reward so far would give us more information.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 149)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    @jit
    def average_reward(times=1000, trials=100):
        """this generates the probabilites for finding the best arm

        Args:
         trials (int): number of times to train the agent
         times (int): length of time to train the agent
        Returns:
         Dict: the probabilites for each epsilon over time
        """
        arm_probabilities = numpy.array([0.1, 0.2, 0.3, 0.4, 0.5])
        random.shuffle(arm_probabilities)
        # arms = [BernoulliArm(probability) for probability in arm_probabilities]
        epsilons = numpy.array([0.1, 0.2, 0.3, 0.4, 0.5])

        outcomes = {}
        for epsilon in epsilons:
            agent = EpsilonGreedyOptimized(epsilon, arm_probabilities)
            average_rewards = numpy.zeros(times)
            for trial in range(trials):
                for time in range(times):
                    arm = agent.select_arm()
                    old_reward = agent.total_reward
                    agent.update(arm)
                    average_rewards[time] += (agent.total_reward - old_reward)
                agent.reset()
            outcomes["Epsilon {0:.02f}".format(epsilon)] = average_rewards/trials
        return outcomes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 180)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    start = datetime.now()
    averages = average_reward(TIMES, TRIALS)
    print("Run Time: {0}".format(datetime.now() - start))
    averages = pandas.DataFrame.from_dict(averages)
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;Run Time: 0:01:08.727723&lt;/pre&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 191)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    figure = plot.figure(figsize=(10, 6))
    axe = figure.gca()
    axe.set_title("Reward of the Epsilon Greedy Algorithm ({} trials)".format(TRIALS))
    axe.set_xlabel("Time (number of pulls on the arm)")
    axe.set_ylabel("Average Reward")
    averages.plot(ax=axe, marker='.', linestyle="None")
&lt;/pre&gt;
&lt;/div&gt;
&lt;img alt="epsilon_averages.png" src="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/epsilon_averages.png"&gt;
&lt;p&gt;There's much more variablity and overlap here, as you might expect since I made the probabilities closer. Interestingly, the strongly exploratory agents seem to do worse, even from the beginning, while the more exploitative ones do better.  Although it looks like 0.2 might be doing as well or better than 0.1 once you get over 100.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cumulative-reward"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id8"&gt;6 Cumulative Reward&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous two metrics turn out to be useful, but somewhat unfair to the aggresively exploring models, which we know won't ultimately do as well, but do have an advantage in the initial phase. To better qualify the overall effect of exploration versus exploitation, it's better to use a cumulative sum of the rewards.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 209)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    @jit
    def cumulative_reward(arms, times=1000, trials=100):
        """this generates the cumulative reward as the agent pulls the arms

        Args:
         arms (numpy.array): array of probabilities that the arm will pay-off
         trials (int): number of times to train the agent
         times (int): length of time to train the agent
        Returns:
         Dict: the probabilites for each epsilon over time
        """
        random.shuffle(arms)
        epsilons = numpy.array([0.1, 0.2, 0.3, 0.4, 0.5])

        outcomes = {}
        for epsilon in epsilons:
            agent = EpsilonGreedyOptimized(epsilon, arms)
            cumulative_rewards = numpy.zeros(times)
            for trial in range(trials):
                for time in range(times):
                    arm = agent.select_arm()
                    agent.update(arm)
                    cumulative_rewards[time] = agent.total_reward
                agent.reset()
            outcomes["Epsilon {:.02f}".format(epsilon)] = cumulative_rewards/trials
        return outcomes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 238)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    def generate_cumulative(arms):
        """runs the cumulative output function

        Args:
         arms (numpy.array): probabilities that arms will pay out

        Returns:
         pandas.DataFrame: the average cumulative rewards
        """
        start = datetime.now()
        cumulative = cumulative_reward(arms, times=TIMES, trials=TRIALS)
        print("Run Time: {0}".format(datetime.now() - start))
        return pandas.DataFrame.from_dict(cumulative)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 254)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    def plot_cumulative(cumulative):
        """generates and plots cumulative average

        Args:
         cumulative (pandas.DataFrame): data to plot
        """
        figure = plot.figure(figsize=(10, 6))
        axe = figure.gca()
        axe.set_title("Cumulative Reward of the Epsilon Greedy Algorithm ({} trials)".format(TRIALS))
        axe.set_xlabel("Time (number of pulls on the arm)")
        axe.set_ylabel("Cumulative Reward")
        cumulative.plot(ax=axe)
        return
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 270)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    cumulative = generate_cumulative(numpy.arange(0.1, 0.6, 0.1))
    plot_cumulative(cumulative)
&lt;/pre&gt;
&lt;/div&gt;
&lt;img alt="epsilon_greedy_cumulative.png" src="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/epsilon_greedy_cumulative.png"&gt;
&lt;p&gt;Because of the randomness this will change everytime you run it, but we can see that in this case, the average cumulative reward was better for the 0.3 and 0.5 epsilon values than the more conservative values up until around 275, and the second most conservative case (0.2) actually did worse on average than the more exploratory cases did.&lt;/p&gt;
&lt;section id="imbalanced-case"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/#id9"&gt;6.1 Imbalanced Case&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I'll re-run this again with more arms and a only one clear good arm to see if this changes things.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 284)&lt;/p&gt;
&lt;p&gt;Cannot find pygments lexer for language "ipython"&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: ipython

    plot_cumulative(generate_cumulative(numpy.array([0.1] * 10 + [0.9])))
&lt;/pre&gt;
&lt;/div&gt;
&lt;img alt="epsilon_cumulative_2.png" src="https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/epsilon_cumulative_2.png"&gt;
&lt;p&gt;In this case, the most exploitive agent did much worse than the other agents. It looks like it didn't find the best arm until around the 240th pull. In this case, when most arms pay off poorly and one arm pays off much better, the exploratory arms accumulate more reward within our time frame. I'm guessing that the 0.10 epsilon would, given enough time, pull ahead, and you can in fact see that the most exploratory agent has already been surpassed by the 0.2 agent, so eventually exploration would probably take a back seat to exploitation, but not in this case. It's important to note, however, that if the most exploitive agent had happened to find the best arm at the start, he would likely have ended up the best, it's just the nature of randomization that you aren't guaranteed that this would be the case.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;&lt;/div&gt;</description><category>algorithm</category><guid>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/finding-the-best-epsilon/</guid><pubDate>Mon, 31 Jul 2017 01:41:00 GMT</pubDate></item><item><title>A Bernoulli Arm</title><link>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/A-Bernoulli-Arm/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;section id="introduction"&gt;
&lt;h2&gt;1 Introduction&lt;/h2&gt;
&lt;p&gt;This is an implementation of one arm of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multi-armed_bandit"&gt;n-armed bandit&lt;/a&gt; to test the Epsilon Greedy algorithm. It takes a probability that it will return a reward. It also optionally let's you set the penalty and reward values, but defaults to a reward of 1 and a penalty of 0 (so it's really no reward more than a penalty).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="imports"&gt;
&lt;h2&gt;2 Imports&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_59c23e93ff73428f8d6772e3a4df0317-1" name="rest_code_59c23e93ff73428f8d6772e3a4df0317-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python standard library&lt;/span&gt;
&lt;a id="rest_code_59c23e93ff73428f8d6772e3a4df0317-2" name="rest_code_59c23e93ff73428f8d6772e3a4df0317-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="bernoulli-arm"&gt;
&lt;h2&gt;3 Bernoulli Arm&lt;/h2&gt;
&lt;p&gt;The Bernoulli Arm will generate a value when its arm is pulled at a payout rate specified by the `probability` value.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-1" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-2" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-3" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BernoulliArm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-4" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-4"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""A simulation of one arm of a multi-armed bandit&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-5" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-6" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-7" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     probability (float): probability of a reward&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-8" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     reward (float): value to return on a win&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-9" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     penalty (float): value to return on a loss&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-10" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-11" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-11"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-12" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-13" name="rest_code_e364a3b548814ee2b708d2ccf0d4e03d-13"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;section id="constructor"&gt;
&lt;h3&gt;3.1 Constructor&lt;/h3&gt;
&lt;p&gt;The constructor takes three values:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;probability of winning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reward on winning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;penalty on losing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the way the problem is set up, the reward and penalty are already set at 1 and 0, but I didn't want there to be magic numbers so they can be changed if needed.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_27d7828a65af493f9f91fb65915e59f3-1" name="rest_code_27d7828a65af493f9f91fb65915e59f3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;penalty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_27d7828a65af493f9f91fb65915e59f3-2" name="rest_code_27d7828a65af493f9f91fb65915e59f3-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probability&lt;/span&gt;
&lt;a id="rest_code_27d7828a65af493f9f91fb65915e59f3-3" name="rest_code_27d7828a65af493f9f91fb65915e59f3-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a id="rest_code_27d7828a65af493f9f91fb65915e59f3-4" name="rest_code_27d7828a65af493f9f91fb65915e59f3-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penalty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;penalty&lt;/span&gt;
&lt;a id="rest_code_27d7828a65af493f9f91fb65915e59f3-5" name="rest_code_27d7828a65af493f9f91fb65915e59f3-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="the-call"&gt;
&lt;h3&gt;3.2 The Call&lt;/h3&gt;
&lt;p&gt;This is called &lt;code class="docutils literal"&gt;pull&lt;/code&gt; in most cases, but I thought it would be more uniform to put it in a call.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-1" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-2" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and returns a reward or penalty&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-3" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-4" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-5" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: value returned on pulling the arm&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-6" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-7" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-8" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penalty&lt;/span&gt;
&lt;a id="rest_code_cf02803d1a3649b4a4f5b98acd742754-9" name="rest_code_cf02803d1a3649b4a4f5b98acd742754-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;/section&gt;&lt;/div&gt;</description><category>algorithm</category><guid>https://necromuralist.github.io/Bandits-and-Pigeon-Bombs/posts/A-Bernoulli-Arm/</guid><pubDate>Mon, 31 Jul 2017 01:37:00 GMT</pubDate></item></channel></rss>