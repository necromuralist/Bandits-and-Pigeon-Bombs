<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reinforcement Learning</title><link>https://necromuralist.github.io/data_science/</link><description>Reinforcement Learning studies.</description><atom:link href="https://necromuralist.github.io/data_science/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:necromuralist@gmail.com"&gt;necromuralist&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sat, 13 Jan 2018 00:20:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PyBrain Optimization Example</title><link>https://necromuralist.github.io/data_science/posts/PyBrain-Optimization-Example/</link><dc:creator>necromuralist</dc:creator><description>&lt;div&gt;&lt;p&gt;This is the &lt;a class="reference external" href="http://www.pybrain.org/docs/tutorial/optimization.html#general-optimization-using-evolvable"&gt;general optimization example&lt;/a&gt; from the pybrain documentation.&lt;/p&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;1 Imports&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python standard library&lt;/span&gt;
&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;
&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.structure.evolvables.evolvable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Evolvable&lt;/span&gt;
&lt;a name="rest_code_70f3b346ab3a4000a0cb61dedff9e839-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybrain.optimization&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HillClimber&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-evolvable"&gt;
&lt;h2&gt;2 The Evolvable&lt;/h2&gt;
&lt;p&gt;To make an optimization that can take arbitrary values (not just continuous numbers), you can implement a sub-class of the PyBrain &lt;a class="reference external" href="http://www.pybrain.org/docs/api/structure/evolvables.html"&gt;Evolvable&lt;/a&gt; class.&lt;/p&gt;
&lt;div class="section" id="the-constructor"&gt;
&lt;h3&gt;2.1 The Constructor&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Evolvable&lt;/tt&gt; class doesn't implement a constructor so you can create one with any parameters you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mutate-method"&gt;
&lt;h3&gt;2.2 The Mutate Method&lt;/h3&gt;
&lt;p&gt;This is the method that is called after each round to change the parameters a little (a &lt;cite&gt;tweak&lt;/cite&gt;). It takes positional arguments, but I think it's called by the Hill Climber so I don't know where it gets passed in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-copy-method"&gt;
&lt;h3&gt;2.3 The Copy Method&lt;/h3&gt;
&lt;p&gt;The tutorial says this is a required method, but the documentation for the API says it should default to a deep-copy. Anyway, I think this is only used if you use something like a Genetic Algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-randomize-method"&gt;
&lt;h3&gt;2.4 The Randomize Method&lt;/h3&gt;
&lt;p&gt;This is used to initialize the parameters to a random value. This is required but I'm pretty sure it doesn't get used in this case.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mutant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Evolvable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""A simple evolvable class&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     x: a starting value to mimic the fitness of the model&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     mininmum: smallest allowed value&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     maximum: biggest allowed value&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-10"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maximum&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-12"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# minimum &amp;lt;= x &amp;lt;= maximum&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-13"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-14"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-17"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-19"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""The value to optimize&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-21"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Returns:&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;         x (float): value to optimize&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-24"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-26"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@x.setter&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-27"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-28"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""sets x, constraining the value&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-30"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Args:&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-31"&gt;&lt;/a&gt;&lt;span class="sd"&gt;         new_x: float from minimum to maximum&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-32"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-33"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-34"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-36"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-37"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""Updates x with a random change&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-39"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Maintains the constraint of the value&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-40"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-41"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-42"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-43"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-44"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-45"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""Returns a new instance with the same x-value&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-47"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Returns:&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-48"&gt;&lt;/a&gt;&lt;span class="sd"&gt;         Mutant: copy of this instance&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-49"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-50"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Mutant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-51"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-52"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-53"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""A method to randomize the x-value"""&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-54"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-55"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-56"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-57"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-58"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""String representation&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-59"&gt;&lt;/a&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-60"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Returns:&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-61"&gt;&lt;/a&gt;&lt;span class="sd"&gt;         str: formatted version of x&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-62"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_4ae5ae2fdb8b41d08c97b816f8f5670c-63"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt; {:.2f} (Maximized={})&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hill-climbing"&gt;
&lt;h2&gt;3 Hill Climbing&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.pybrain.org/docs/api/optimization/optimization.html#module-pybrain.optimization"&gt;HillClimber&lt;/a&gt; is the simplest search - it assumes the first minima or maxima it finds is the global one. By default it tries to maximize the outcome. None of the arguments are required at instantiation, but in this case we're setting:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an &lt;tt class="docutils literal"&gt;evaluator&lt;/tt&gt;: a callable that outputs how well the object to be evaluated did&lt;/li&gt;
&lt;li&gt;an &lt;tt class="docutils literal"&gt;evaluable&lt;/tt&gt;: the object to be evaluated in this case our &lt;tt class="docutils literal"&gt;Mutant&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;maxEvaluations&lt;/tt&gt;: The maximum number of times the &lt;tt class="docutils literal"&gt;evaluable&lt;/tt&gt; is evaluated&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;verbose&lt;/tt&gt;: print each step&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;desiredEvaluation&lt;/tt&gt;: the value that is good enough so the climber can stop&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="the-evaluator-function"&gt;
&lt;h3&gt;3.1 The Evaluator Function&lt;/h3&gt;
&lt;p&gt;In this case we're just going to return the x value of the object.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_1189c7f2acbf4094b17dca2838e610eb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;evaluator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_1189c7f2acbf4094b17dca2838e610eb-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mutant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-instances"&gt;
&lt;h3&gt;3.2 The Instances&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_b1ebf8b8afce44e09618f6c51aae1cf9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;mutant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mutant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b1ebf8b8afce44e09618f6c51aae1cf9-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;climber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HillClimber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evaluator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mutant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxEvaluations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desiredEvaluation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-optimization"&gt;
&lt;h3&gt;3.3 The Optimization&lt;/h3&gt;
&lt;p&gt;The optimization classes get run using their &lt;tt class="docutils literal"&gt;learn&lt;/tt&gt; methods.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_6c70bab7ab0e4ab48387da06a292e535-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;climber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;learn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_6c70bab7ab0e4ab48387da06a292e535-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
('Step:', 0, 'best:', 6.780765339892317)
('Step:', 1, 'best:', 6.780765339892317)
('Step:', 2, 'best:', 6.807553650921801)
('Step:', 3, 'best:', 7.282574697921699)
('Step:', 4, 'best:', 7.45592511459156)
('Step:', 5, 'best:', 7.533694376079802)
('Step:', 6, 'best:', 7.751507552794123)
('Step:', 7, 'best:', 8.184303418505593)
('Step:', 8, 'best:', 8.184303418505593)
('Step:', 9, 'best:', 8.224264996606221)
('Step:', 10, 'best:', 8.4835021736195)
('Step:', 11, 'best:', 9.153976071682798)
('Step:', 12, 'best:', 9.55795557780446)
('Step:', 13, 'best:', 10)
(&amp;lt; 10.00 (Maximized=True)&amp;gt;, 10)
&lt;/pre&gt;
&lt;p&gt;It managed to find the maximum in 13 steps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>pybrain optimization</category><guid>https://necromuralist.github.io/data_science/posts/PyBrain-Optimization-Example/</guid><pubDate>Sat, 13 Jan 2018 00:16:00 GMT</pubDate></item><item><title>Epsilon Greedy with Normal-Distribution Payouts</title><link>https://necromuralist.github.io/data_science/posts/Epsilon-Greedy-with-Normal-Distribution-Payouts/</link><dc:creator>Brunhilde</dc:creator><description>&lt;div&gt;&lt;p&gt;Since the Optimistic Initial Values agent can't use the Bernoulli Arm, I'm creating a version of the Epsilon Greedy Optimized that expects the &lt;tt class="docutils literal"&gt;arms&lt;/tt&gt; to be the population-mean for their payouts and the &lt;tt class="docutils literal"&gt;pull_arm&lt;/tt&gt; will return a set of normally-distributed around that mean.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-6"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jitclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpsilonGreedyNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-8"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The Epsilon Greedy Algorithm With Normal Arm&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     epsilon (float): fraction of the time to explore&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (list): collection of probabilities for bandit arm&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-13"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-14"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-16"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-18"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-22"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-24"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_572548b9e8d947eb8c7e491784b6688c-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="optimized-imports"&gt;
&lt;h2&gt;1.1 Optimized Imports&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jitclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;a name="rest_code_31a3c90353b54b83b4f9106a179c1d6b-7"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-spec"&gt;
&lt;h2&gt;1.2 The Spec&lt;/h2&gt;
&lt;p&gt;This is how you tell numba what attributes the class will have.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"epsilon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"arms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rewards"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"total_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_0c449e40df484506864a5724d499cfac-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-constructor"&gt;
&lt;h2&gt;1.3 The Constructor&lt;/h2&gt;
&lt;p&gt;The constructor takes two arguments - &lt;em&gt;epsilon&lt;/em&gt; and &lt;em&gt;arms&lt;/em&gt;. The &lt;em&gt;arms&lt;/em&gt; list should contain the mean payout for each arm.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_bb299256e7f947d680d560ac8d4baa10-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reset"&gt;
&lt;h2&gt;1.4 Reset&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts, rewards, total_reward to 0s&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_ea98c6106fa049f0b76b546ad17926f8-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="best-arm"&gt;
&lt;h2&gt;1.5 Best Arm&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;best_arm&lt;/tt&gt; property returns the index of the arm that has the highest average reward so far. It returns the index instead of the arm itself because it's used to get the matching counts and rewards in the &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; method. Since I'm using the &lt;tt class="docutils literal"&gt;jitclass&lt;/tt&gt; decorator I'm going to get rid of &lt;tt class="docutils literal"&gt;first_find&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;best_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Index of the arm with the most reward"""&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;a name="rest_code_d794581a2b0d48e8821b8e6aa1d83e7a-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="select-arm"&gt;
&lt;h2&gt;1.6 Select Arm&lt;/h2&gt;
&lt;p&gt;This differs from the other Epsilon Greedy code only in that I'm using numpy instead of python for the random function.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""chooses the next arm to update&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     int: index of the next arm to pull&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_13b8477c88ce4f34b8c409c284d99698-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_arm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="pull-arm"&gt;
&lt;h2&gt;1.7 Pull Arm&lt;/h2&gt;
&lt;p&gt;Since we can't give user-defined objects as attributes of the class, this version will be both algorithm and bandit. This is what's different from the other Epsilon Greedy algorithms in that we're returning the arm's mean plus a random number from the normal distribution. If numba allowed us to pass in objects maybe we could have just switched out bandits. I need to look into how to make that work.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""gets the reward&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index for the arm-probability array&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: reward&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_3cdaa9a7547c47efb6771e63d094b055-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;1.8 Update&lt;/h2&gt;
&lt;p&gt;The update method pulls the arm whose index it is given and then updates the count and reward. Here we're calling the &lt;tt class="docutils literal"&gt;pull_arm&lt;/tt&gt; method instead of using a &lt;tt class="docutils literal"&gt;BernoulliArm&lt;/tt&gt; so we can't re-use the original method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the value&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-11"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-12"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-13"&gt;&lt;/a&gt;                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_3f5936f72f3849aaad3d3b67122cb288-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bandits reinforcementLearning</category><guid>https://necromuralist.github.io/data_science/posts/Epsilon-Greedy-with-Normal-Distribution-Payouts/</guid><pubDate>Wed, 02 Aug 2017 01:48:00 GMT</pubDate></item><item><title>Optimistic Initial Values</title><link>https://necromuralist.github.io/data_science/posts/Optimistic-Initial-Values/</link><dc:creator>Brunhilde</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;1 Introduction&lt;/h2&gt;
&lt;p&gt;This is one possible to the n-armed bandit problem. It is similar to the &lt;em&gt;Epsilon Greedy&lt;/em&gt; algorithm except that instead of using a conditional to decide whether to explore or exploit, the algorithm sets the estimated (mean) payout for each arm to 1 (the theoretical maximum for our case) and then always exploits. As things proceed, the arms will settle down to their actual payoff-rates and those that haven't been explored will be chosen because they are still too high.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-tangle"&gt;
&lt;h2&gt;2 The Tangle&lt;/h2&gt;
&lt;p&gt;This is the no-web template to build the final file.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;declaration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-7"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-9"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-11"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-13"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0a5c592cc0f146989fccf29434c94b40-15"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;3 Imports&lt;/h2&gt;
&lt;p&gt;These are our external dependencies.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f5591b28c7a24b78bc9cb6ecffb32b52-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jitclass&lt;/span&gt;
&lt;a name="rest_code_f5591b28c7a24b78bc9cb6ecffb32b52-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;a name="rest_code_f5591b28c7a24b78bc9cb6ecffb32b52-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-spec"&gt;
&lt;h2&gt;4 The Spec&lt;/h2&gt;
&lt;p&gt;In order to use numba with the &lt;tt class="docutils literal"&gt;OptimisticInitialValues&lt;/tt&gt; class you have to create a 'spec' that tells numba what the data-types are for each of its fields.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SPEC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"arms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rewards"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"total_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"initial_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_cc215b8b3c754a6a9e5251f8f096849f-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-class-declaration"&gt;
&lt;h2&gt;5 The Class Declaration&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jitclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPEC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OptimisticInitialValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Optimistic Initial Values greedy algorithm&lt;/span&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array[float]: payout-probabilities for each arm&lt;/span&gt;
&lt;a name="rest_code_62b8932bad814b5fb42d50916fc9cac0-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-constructor"&gt;
&lt;h2&gt;6 The Constructor&lt;/h2&gt;
&lt;p&gt;Here's our first change from the epsilon-greedy algorithm. We no longer have an &lt;tt class="docutils literal"&gt;epsilon&lt;/tt&gt; value and instead of initializing the &lt;tt class="docutils literal"&gt;rewards&lt;/tt&gt; as zeros we initialize them with an 'initial' reward. Also, although you can't see it here, the arms have to be a list of mean payout values (see the &lt;tt class="docutils literal"&gt;pull_arm&lt;/tt&gt; method below).&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a name="rest_code_14e45d4a2ef049dcab77ef6ebd03eeab-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="select-arm"&gt;
&lt;h2&gt;7 Select Arm&lt;/h2&gt;
&lt;p&gt;This chooses the next arm. Unlike the epsilon-greedy algorithm it will always pick the 'best' arm, choosing the first if there is a tie. Since the whole class is in the jit I'm also not using the external &lt;tt class="docutils literal"&gt;find_first&lt;/tt&gt; method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Index of the arm with the most reward&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     integer: index of arm with highest average reward&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_39ef147cbf0549cba23bda355dc98556-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="pull-arm"&gt;
&lt;h2&gt;8 Pull Arm&lt;/h2&gt;
&lt;p&gt;This gets the reward for the arm. with a Bernoulli arm, there's a chance that an arm will be set to 0 on its first pull, at which point you will never explore it (since there's no exploration), so even the best arm might get wiped out. To fix this you need a different scheme. This one uses a population mean (selected &lt;tt class="docutils literal"&gt;from self.arms&lt;/tt&gt;) which has noise added by selecting from the standard normal distribution.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""gets the reward&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index for the arm population-mean array&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: payout for the arm&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_a569b19151fe4458a844f91ec8efa77c-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="update-arm"&gt;
&lt;h2&gt;9 Update Arm&lt;/h2&gt;
&lt;p&gt;This pulls the arm and updates the reward. This works the same as the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;epsilon-greedy&lt;/span&gt;&lt;/tt&gt; version does.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the average reward&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    also updates the total_reward the algorithm has earned so far&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-9"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-13"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-14"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-15"&gt;&lt;/a&gt;                         &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_acfef257ad854c32ac7657132f6e0b62-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reset"&gt;
&lt;h2&gt;10 Reset&lt;/h2&gt;
&lt;p&gt;This resets the values so that you can re-use the algorithm. As with the constructor, it sets the &lt;tt class="docutils literal"&gt;rewards&lt;/tt&gt; to all ones instead of zeros as was the case with the epsilon-greedy algorithm.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts, rewards, total_reward to 0s&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_reward&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_88ce437926164e28b1581cf36da7f9ce-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bandits reinforcementLearning</category><guid>https://necromuralist.github.io/data_science/posts/Optimistic-Initial-Values/</guid><pubDate>Wed, 02 Aug 2017 01:47:00 GMT</pubDate></item><item><title>Assessing the Performance</title><link>https://necromuralist.github.io/data_science/posts/assessing-the-performance/</link><dc:creator>Brunhilde</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;1 Introduction&lt;/h2&gt;
&lt;p&gt;As with the Epsilon-Greedy algorithm I'm going to use the Cumulative Reward as the metric. In this case we don't really have a parameter to tune.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;2 Imports&lt;/h2&gt;
&lt;p&gt;The dependencies.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python standard library&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jit&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-7"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-8"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plot&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-9"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# this project&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-12"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optimistic_initial_values&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OptimisticInitialValues&lt;/span&gt;
&lt;a name="rest_code_13e69967ef38464997ec06a7aa53bf7d-13"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;epsilon_greedy_normal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyNormal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="set-up-the-plotting"&gt;
&lt;h2&gt;3 Set-up the Plotting&lt;/h2&gt;
&lt;p&gt;This will enable the plotting and set the style.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_5f4dd984235f496ebcd42ef7504ade93-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;a name="rest_code_5f4dd984235f496ebcd42ef7504ade93-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;seaborn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"whitegrid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="running-the-assessment"&gt;
&lt;h2&gt;4 Running the Assessment&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""this generates the cumulative reward as the agent pulls the arms&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     agent: implementation that selects and updates the arms&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     trials (int): number of times to train the agent&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     times (int): length of time to train the agent&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array: average cumulative rewards over time&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;trial&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-17"&gt;&lt;/a&gt;            &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5863ab41d3704897b2c772ff73b3ea23-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""generates and plots cumulative average&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     cumulative (pandas.DataFrame): data to plot&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Cumulative Reward of the Optimistic Initial Values Algorithm ({} trials)"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Time (number of pulls on the arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Cumulative Reward"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b7448ea995094170b19f88a9ae578d0f-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;similar_payout_rates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;similar_payout_rates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;one_good_arm_rates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_92392caa3b304c58a064523b5aa0f1e9-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_good_arm_rates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="similar-arms"&gt;
&lt;h3&gt;4.1 Similar Arms&lt;/h3&gt;
&lt;p&gt;This will create a range where each arm only differs by 0.1&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;optimistic_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptimisticInitialValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;similar_payout_rates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Optimistic Initial Values"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optimistic_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;epsilon_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similar_payout_rates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon Greedy (0.1)"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96d818c7a57b436182501d3ae3dbbc33-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="optimistic_similar_cumulative.png" src="https://necromuralist.github.io/data_science/posts/assessing-the-performance/optimistic_similar_cumulative.png"&gt;
&lt;p&gt;The Optimistic Initial Values agent does better than the Epsilon Greedy, as you would expect (since it eventually stops exploring). But it looks suspisciously linear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-good-arm"&gt;
&lt;h3&gt;4.2 One Good Arm&lt;/h3&gt;
&lt;p&gt;Lets see how it goes when one arm dominates the payouts.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_good_arm_rates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;optimistic_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptimisticInitialValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_good_arm_rates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Optimistic Initial Values"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optimistic_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;epsilon_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;one_good_arm_rates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon Greedy (0.1)"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a71c432c0a8646cbbd171d017f8c2914-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="optimistic_cumulative_one_good_arm.png" src="https://necromuralist.github.io/data_science/posts/assessing-the-performance/optimistic_cumulative_one_good_arm.png"&gt;
&lt;p&gt;It looks like the optimistic agent does even better with one dominant arm. Likely because it found it quick enough that always exploiting it gives it a huge advantage over the epsilon greedy, which never stops exploring.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;average_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""this generates the average reward for the trials over time&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     trials (int): number of times to train the agent&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     times (int): length of time to train the agent&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array: the average reward&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;trial&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;old_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-17"&gt;&lt;/a&gt;            &lt;span class="n"&gt;average_rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;old_reward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c298e8bed8e946e3a73b15b6252fff1a-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;average_rewards&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_455fafc2386347038c8389c21e35680f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_455fafc2386347038c8389c21e35680f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Optimistic Initial Values"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optimistic_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_455fafc2386347038c8389c21e35680f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon 0.1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_03f6d58a2a67457b9e6b4b89f7753b49-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;averages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Average Reward (One Dominant Arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Time (number of pulls on the arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Average Reward"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_124cd45396b74a11afb62e1c636b5516-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;averages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="optimistic_averages.png" src="https://necromuralist.github.io/data_science/posts/assessing-the-performance/optimistic_averages.png"&gt;
&lt;p&gt;It looks like there was a brief period where the Epsilon Greedy did better, but the Optimistic agent settled in fairly quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bandits reinforcementLearning</category><guid>https://necromuralist.github.io/data_science/posts/assessing-the-performance/</guid><pubDate>Wed, 02 Aug 2017 01:46:00 GMT</pubDate></item><item><title>Finding the Best Epsilon</title><link>https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#introduction" id="id1"&gt;1 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#imports" id="id2"&gt;2 Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#set-up-the-plotting" id="id3"&gt;3 Set-up the Plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#the-probabilities" id="id4"&gt;4 The Probabilities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#generate-the-probabilities" id="id5"&gt;4.1 Generate the Probabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#inspecting-the-outcome" id="id6"&gt;4.2 Inspecting the Outcome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#average-reward" id="id7"&gt;5 Average Reward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#cumulative-reward" id="id8"&gt;6 Cumulative Reward&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#imbalanced-case" id="id9"&gt;6.1 Imbalanced Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id1"&gt;1 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is one of the ways to characterize the performance of the &lt;em&gt;Epsilon Greedy&lt;/em&gt; agent using our &lt;em&gt;Bernoulli Arm&lt;/em&gt;. We are going to look at three ways to evaluate how well the algorithm does.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;probability of using the best arm&lt;/li&gt;
&lt;li&gt;average reward&lt;/li&gt;
&lt;li&gt;cumulative reward&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id2"&gt;2 Imports&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python standard library&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jit&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-7"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-8"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-9"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plot&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-10"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# this project&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-13"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;epsilon_greedy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;EpsilonGreedy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;find_first&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-17"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;epsilon_greedy_optimized&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyOptimized&lt;/span&gt;
&lt;a name="rest_code_842d8d744c964e7fb47671b77d0eb90c-18"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bernoulli_arm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BernoulliArm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="set-up-the-plotting"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id3"&gt;3 Set-up the Plotting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will enable the plotting and set the style.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_b8559ac8c1f64d7a9ccc73b48f5efa60-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;a name="rest_code_b8559ac8c1f64d7a9ccc73b48f5efa60-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;seaborn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"whitegrid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-probabilities"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id4"&gt;4 The Probabilities&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="generate-the-probabilities"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id5"&gt;4.1 Generate the Probabilities&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This code will run generate the probabilities. Although I made it so that using the &lt;tt class="docutils literal"&gt;EpsilonGreedy&lt;/tt&gt; call method would both choose the arm and update the reward, in this case we need to know which arm was selected so I'm going to do the steps individually.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_probabilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""this generates the probabilites for finding the best arm&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     trials (int): number of times to train the agent&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     times (int): length of time to train the agent&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     Dict: the probabilites for each epsilon over time&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     """&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;arm_probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;best_arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BernoulliArm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;probability&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;epsilons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;epsilons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;trial&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-21"&gt;&lt;/a&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-22"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-23"&gt;&lt;/a&gt;                &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-24"&gt;&lt;/a&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;best_arm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-25"&gt;&lt;/a&gt;                    &lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-26"&gt;&lt;/a&gt;            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;outcomes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon {:.02f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;
&lt;a name="rest_code_238f478030fc4d048d6ba8a4afc0a692-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="inspecting-the-outcome"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id6"&gt;4.2 Inspecting the Outcome&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_20af9eb454004c5095a278bcc8d3102a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
&lt;a name="rest_code_20af9eb454004c5095a278bcc8d3102a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3719a2305a4e4c819811f519de24fc1a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3719a2305a4e4c819811f519de24fc1a-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_probabilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3719a2305a4e4c819811f519de24fc1a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Run Time: {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3719a2305a4e4c819811f519de24fc1a-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3719a2305a4e4c819811f519de24fc1a-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
       Epsilon 0.05  Epsilon 0.10  Epsilon 0.20  Epsilon 0.30  Epsilon 0.40  \
count    400.000000    400.000000    400.000000    400.000000    400.000000
mean       8.784956      9.971200      9.801344      9.084844      8.235194
std        3.064916      2.523568      1.775677      1.319447      0.998305
min        0.120000      0.275000      0.495000      0.757500      1.050000
25%        7.141875      9.740000     10.264375      9.390000      8.409375
50%        9.937500     11.187500     10.456250      9.475000      8.480000
75%       11.225000     11.457500     10.515000      9.530625      8.545000
max       11.720000     11.605000     10.727500      9.665000      8.712500

       Epsilon 0.50
count    400.000000
mean       7.310087
std        0.763259
min        1.190000
25%        7.406875
50%        7.473750
75%        7.535625
max        7.725000
&lt;/pre&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_2be0449551b84ecba5cd12c16acc7190-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"epsilon_greedy_accuracy.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Accuracy of the Epsilon Greedy Algorithm ({} trials)"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Time (number of pulls on the arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Probability of retrieving the best arm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ea16d81e05c946dfba5634dc80d617e7-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="epsilon_greedy_probablilities.png" src="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/epsilon_greedy_probablilities.png"&gt;
&lt;p&gt;Looking at the plots, it appears that the epsilons greater than 0.05 converge faster that 0.05 (their curves are steeper at the beginning), as you would expect, but they also don't do as well in the long run, as you might also expect, since they're doing more exploration. In the long run, the more exploitation, the better the profit, but I suppose it depends on the window you have to work with, if you have a short one, then the more aggresive explorers might be better. Anything less than 350 would do better with 0.1 rather than 0.05, for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="average-reward"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id7"&gt;5 Average Reward&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things to note about the previous trials is that there was one arm that did notably better than all the others. When they are more uniform using the probability of retrieving the best arm might not be as revealing. Instead, using the average reward so far would give us more information.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_832685b26783430788086575214384a8-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;average_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""this generates the probabilites for finding the best arm&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     trials (int): number of times to train the agent&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     times (int): length of time to train the agent&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     Dict: the probabilites for each epsilon over time&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;arm_probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# arms = [BernoulliArm(probability) for probability in arm_probabilities]&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;epsilons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;epsilons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyOptimized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm_probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;average_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-20"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;trial&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-21"&gt;&lt;/a&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-22"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-23"&gt;&lt;/a&gt;                &lt;span class="n"&gt;old_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-24"&gt;&lt;/a&gt;                &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-25"&gt;&lt;/a&gt;                &lt;span class="n"&gt;average_rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;old_reward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-26"&gt;&lt;/a&gt;            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;outcomes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon {0:.02f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average_rewards&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;
&lt;a name="rest_code_832685b26783430788086575214384a8-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3cba7a53b9e240fab4772772d80b982c-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3cba7a53b9e240fab4772772d80b982c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;averages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3cba7a53b9e240fab4772772d80b982c-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Run Time: {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3cba7a53b9e240fab4772772d80b982c-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;averages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;averages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
Run Time: 0:01:08.727723
&lt;/pre&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Reward of the Epsilon Greedy Algorithm ({} trials)"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Time (number of pulls on the arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Average Reward"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_599a325931b34b5d9bfd4c5d6c1ad228-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;averages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="epsilon_averages.png" src="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/epsilon_averages.png"&gt;
&lt;p&gt;There's much more variablity and overlap here, as you might expect since I made the probabilities closer. Interestingly, the strongly exploratory agents seem to do worse, even from the beginning, while the more exploitative ones do better.  Although it looks like 0.2 might be doing as well or better than 0.1 once you get over 100.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cumulative-reward"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id8"&gt;6 Cumulative Reward&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous two metrics turn out to be useful, but somewhat unfair to the aggresively exploring models, which we know won't ultimately do as well, but do have an advantage in the initial phase. To better qualify the overall effect of exploration versus exploitation, it's better to use a cumulative sum of the rewards.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""this generates the cumulative reward as the agent pulls the arms&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (numpy.array): array of probabilities that the arm will pay-off&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     trials (int): number of times to train the agent&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     times (int): length of time to train the agent&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     Dict: the probabilites for each epsilon over time&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;epsilons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;epsilons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EpsilonGreedyOptimized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;trial&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-20"&gt;&lt;/a&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-21"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-22"&gt;&lt;/a&gt;                &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-23"&gt;&lt;/a&gt;                &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-24"&gt;&lt;/a&gt;            &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;outcomes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Epsilon {:.02f}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_rewards&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trials&lt;/span&gt;
&lt;a name="rest_code_3aca164cc5e0483f8a8aeac037317037-26"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""runs the cumulative output function&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (numpy.array): probabilities that arms will pay out&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     pandas.DataFrame: the average cumulative rewards&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cumulative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative_reward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIMES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Run Time: {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3d277ef6cf3e4633ac8409bf34bf741e-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""generates and plots cumulative average&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     cumulative (pandas.DataFrame): data to plot&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Cumulative Reward of the Epsilon Greedy Algorithm ({} trials)"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRIALS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Time (number of pulls on the arm)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Cumulative Reward"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_28f8abe6943e4dfeba74f062b8e3b43d-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code ipython"&gt;&lt;a name="rest_code_dab9b023901e46caaeea5a4084f22a21-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dab9b023901e46caaeea5a4084f22a21-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="epsilon_greedy_cumulative.png" src="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/epsilon_greedy_cumulative.png"&gt;
&lt;p&gt;Because of the randomness this will change everytime you run it, but we can see that in this case, the average cumulative reward was better for the 0.3 and 0.5 epsilon values that the more conservative values up until around 275, and the second most conservative case (0.2) actually did worse on average than the more exploratory cases did.&lt;/p&gt;
&lt;div class="section" id="imbalanced-case"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/#id9"&gt;6.1 Imbalanced Case&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I'll re-run this again with more arms and a only one clear good arm to see if this changes things.&lt;/p&gt;
&lt;pre class="code ipython"&gt;&lt;a name="rest_code_23fadfc804a54e19ae1f10eba630ffb0-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;plot_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generate_cumulative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
&lt;/pre&gt;&lt;img alt="epsilon_cumulative_2.png" src="https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/epsilon_cumulative_2.png"&gt;
&lt;p&gt;In this case, the most exploitive agent did much worse than the other agents. It looks like it didn't find the best arm until around the 240th pull. In this case, when most arms pay off poorly and one arm pays off much better, the exploratory arms accumulate more reward within our time frame. I'm guessing that the 0.10 epsilon would, given enough time, pull ahead, and you can in fact see that the most exploratory agent has already been surpassed by the 0.2 agent, so eventually exploration would probably take a back seat to exploitation, but not in this case. It's important to note, however, that if the most exploitive agent had happened to find the best arm at the start, he would likely have ended up the best, it's just the nature of randomization that you aren't guaranteed that this would be the case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>algorithm</category><guid>https://necromuralist.github.io/data_science/posts/finding-the-best-epsilon/</guid><pubDate>Mon, 31 Jul 2017 01:41:00 GMT</pubDate></item><item><title>A Bernoulli Arm</title><link>https://necromuralist.github.io/data_science/posts/A-Bernoulli-Arm/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;1 Introduction&lt;/h2&gt;
&lt;p&gt;This is an implementation of one arm of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multi-armed_bandit"&gt;n-armed bandit&lt;/a&gt; to test the Epsilon Greedy algorithm. It takes a probability that it will return a reward. It also optionally let's you set the penalty and reward values, but defaults to a reward of 1 and a penalty of 0 (so it's really no reward more than a penalty).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;2 Imports&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_faf342424cd44410a5992a9205bad8b9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python standard library&lt;/span&gt;
&lt;a name="rest_code_faf342424cd44410a5992a9205bad8b9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="bernoulli-arm"&gt;
&lt;h2&gt;3 Bernoulli Arm&lt;/h2&gt;
&lt;p&gt;The Bernoulli Arm will generate a value when its arm is pulled at a payout rate specified by the `probability` value.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BernoulliArm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-4"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""A simulation of one arm of a multi-armed bandit&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     probability (float): probability of a reward&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     reward (float): value to return on a win&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     penalty (float): value to return on a loss&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-11"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_33bf9e47b5344e34927f880e18e3fec8-13"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="constructor"&gt;
&lt;h3&gt;3.1 Constructor&lt;/h3&gt;
&lt;p&gt;The constructor takes three values:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;probability of winning&lt;/li&gt;
&lt;li&gt;reward on winning&lt;/li&gt;
&lt;li&gt;penalty on losing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the way the problem is set up, the reward and penalty are already set at 1 and 0, but I didn't want there to be magic numbers so they can be changed if needed.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8e786658fa3e4e0e9d1ae04853a93283-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;penalty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8e786658fa3e4e0e9d1ae04853a93283-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probability&lt;/span&gt;
&lt;a name="rest_code_8e786658fa3e4e0e9d1ae04853a93283-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a name="rest_code_8e786658fa3e4e0e9d1ae04853a93283-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penalty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;penalty&lt;/span&gt;
&lt;a name="rest_code_8e786658fa3e4e0e9d1ae04853a93283-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-call"&gt;
&lt;h3&gt;3.2 The Call&lt;/h3&gt;
&lt;p&gt;This is called &lt;tt class="docutils literal"&gt;pull&lt;/tt&gt; in most cases, but I thought it would be more uniform to put it in a call.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and returns a reward or penalty&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     float: value returned on pulling the arm&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penalty&lt;/span&gt;
&lt;a name="rest_code_016e8b598b5145a4abf6a662921bafcc-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>algorithm</category><guid>https://necromuralist.github.io/data_science/posts/A-Bernoulli-Arm/</guid><pubDate>Mon, 31 Jul 2017 01:37:00 GMT</pubDate></item><item><title>The Epsilon Greedy Algorithm</title><link>https://necromuralist.github.io/data_science/posts/The-Epsilon-Greedy-Algorithm/</link><dc:creator>hades</dc:creator><description>&lt;div&gt;&lt;div class="section" id="background"&gt;
&lt;h2&gt;1 Background&lt;/h2&gt;
&lt;p&gt;This is an implementation of the Epsilon Greedy algorithm to find solutions for the multi-arm-bandit problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="imports"&gt;
&lt;h2&gt;2 Imports&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python&lt;/span&gt;
&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jit&lt;/span&gt;
&lt;a name="rest_code_94ad09ba32d6423fbcc305aaed56a8ed-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="find-first"&gt;
&lt;h2&gt;3 Find First&lt;/h2&gt;
&lt;p&gt;This is a helper function to find the first matching item in an array-like collection.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jit&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""find the first item in the vector&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     item: thing to match&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     vector: thing to search&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     value: index of first matching item, -1 if not found&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;a name="rest_code_341ef2ca2d7c4df49468ed91b7ea417b-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="epsilon-greedy"&gt;
&lt;h2&gt;4 Epsilon Greedy&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;epsilon-greedy&lt;/em&gt; algorithm tries to solve the exploitation-exploration dilemna by exploring a fraction of the time (set by &lt;em&gt;epsilon&lt;/em&gt;) and using the best solution found so far the rest of the time. This implementation is based on the one in Bandit Algorithms for Website Optimization &lt;a class="footnote-reference" href="https://necromuralist.github.io/data_science/posts/The-Epsilon-Greedy-Algorithm/#id5" id="id1"&gt;[1]&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpsilonGreedy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-5"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The Epsilon Greedy Algorithm&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     epsilon (float): fraction of the time to explore&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (list): collection of bandits to pull&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-11"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-13"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-15"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-17"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-19"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-21"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-23"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_a90c7cfc856e426ab41a2cdfafb52f52-25"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="the-constructor"&gt;
&lt;h3&gt;4.1 The Constructor&lt;/h3&gt;
&lt;p&gt;The constructor takes two arguments - &lt;em&gt;epsilon&lt;/em&gt; and &lt;em&gt;arms&lt;/em&gt;. The &lt;em&gt;arms&lt;/em&gt; list should contain bandits that return a reward or penalty when pulled (called).&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_ebc6da1cfd1c47fdbf1ecaf08bc0f249-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="best-arm"&gt;
&lt;h3&gt;4.2 Best Arm&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;best_arm&lt;/tt&gt; property returns the index of the arm that has the highest average reward so far. It returns the index instead of the arm itself because it's used to get the matching counts and rewards in the &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c1ebfeed07cc4e1ca933263728811764-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_c1ebfeed07cc4e1ca933263728811764-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;best_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c1ebfeed07cc4e1ca933263728811764-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Index of the arm with the most reward"""&lt;/span&gt;
&lt;a name="rest_code_c1ebfeed07cc4e1ca933263728811764-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c1ebfeed07cc4e1ca933263728811764-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="counts"&gt;
&lt;h3&gt;4.3 Counts&lt;/h3&gt;
&lt;p&gt;The `counts` keeps track of the number of times each arm is pulled.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""counts of times each arm is pulled&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array: array of counts&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counts&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-9"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ed37564f3f8b41e094adedae9d4236f5-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="rewards"&gt;
&lt;h3&gt;4.4 Rewards&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;rewards&lt;/tt&gt; attributes holds the running average reward that each arm has returned.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-3"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""array of running average of rewards for each arms&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     numpy.array: running averages&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rewards&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-9"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_2b7fc19b5bd44ef796e737bade250a0d-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rewards&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reset"&gt;
&lt;h3&gt;4.5 Reset&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts and rewards to None&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy without re-constructing&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    the arms&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-9"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_6f88f30a2d134bebb8afcbd1e7883965-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="select-arm"&gt;
&lt;h3&gt;4.6 Select Arm&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;select_arm&lt;/em&gt; method will choose either the best arm or a random one based on a randomly drawn value and how it compares to epsilon.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""chooses the next arm to update&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     int: index of the next arm to pull&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_b0a20645b4c14eaaa245e457edfd9acd-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_arm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;4.7 Update&lt;/h3&gt;
&lt;p&gt;The update method pulls the arm whose index it is given and then updates the count and reward.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the value&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-11"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-12"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-13"&gt;&lt;/a&gt;                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_318e77a900f84e238dc4e13c8ee1d4e0-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="call"&gt;
&lt;h3&gt;4.8 Call&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;__call__&lt;/em&gt; method will be the main update method that unifies the naming conventions found in the books.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8bbea1d04b72473ba428ff23b44749fb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8bbea1d04b72473ba428ff23b44749fb-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""chooses an arm and updates the rewards"""&lt;/span&gt;
&lt;a name="rest_code_8bbea1d04b72473ba428ff23b44749fb-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_arm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_8bbea1d04b72473ba428ff23b44749fb-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8bbea1d04b72473ba428ff23b44749fb-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epsilon-greedy-optimized"&gt;
&lt;h2&gt;5 Epsilon Greedy Optimized&lt;/h2&gt;
&lt;p&gt;It turns out that while the implementation above works correctly, it can be rather slow, given that we need to train it thousands of times to get meaningful results. This is a numba-compatible version that drops the testing time from around 11 minutes to a minute or less. One of the restrictions of using classes in numba is that you have to declare the types of all the attributes of the class (this happens in the &lt;cite&gt;spec&lt;/cite&gt; passed to the &lt;cite&gt;jitclass&lt;/cite&gt; decorator). This means that I can't pass in &lt;cite&gt;BernoulliArm&lt;/cite&gt; objects to the constructor, because &lt;cite&gt;numba&lt;/cite&gt; has no idea what they are, so this solution is a hybrid greedy algorithm and bandit arm mashed together.&lt;/p&gt;
&lt;p&gt;The documentation for &lt;cite&gt;numba&lt;/cite&gt; states that you have to initialize the attributes in the &lt;cite&gt;__init__&lt;/cite&gt; method so I'm getting rid of the properties that build the numpy arrays and moving their creation to the constructor. In addition, the code that no longer expects the =BernoulliArm= objects will have to be re-implemented. In the tangle code anything with the &lt;cite&gt;optimized-&lt;/cite&gt; prefix is re-implemented (other than the &lt;cite&gt;spec&lt;/cite&gt;), otherwise the code is being pulled in from the original &lt;cite&gt;EpsilonGreedy&lt;/cite&gt; implementation.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-6"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@jitclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpsilonGreedyOptimized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-8"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The Epsilon Greedy Algorithm&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     epsilon (float): fraction of the time to explore&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arms (list): collection of probabilities for bandit arm&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-13"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-14"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-16"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-18"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-20"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-22"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-24"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;optimized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_b8a2b0eb39c8448185cbf291c82cf9be-26"&gt;&lt;/a&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="optimized-imports"&gt;
&lt;h3&gt;5.1 Optimized Imports&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# python&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pypi&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;jitclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-8"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-9"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;
&lt;a name="rest_code_2d1b97d4426f4ec0b5d08cda88eed1ec-10"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-spec"&gt;
&lt;h3&gt;5.2 The Spec&lt;/h3&gt;
&lt;p&gt;This is how you tell numba what attributes the class will have. This is where most of the errors were when I first tried this. The error-messages aren't particularly helpful. Just be aware that this is the first place you should look if things crash.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"epsilon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"arms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rewards"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[:]),&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"total_reward"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numba&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_b06983598a0043398d0f06c2b06d98dc-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;5.3 The Constructor&lt;/h3&gt;
&lt;p&gt;The constructor takes two arguments - &lt;em&gt;epsilon&lt;/em&gt; and &lt;em&gt;arms&lt;/em&gt;. The &lt;em&gt;arms&lt;/em&gt; list should contain probabilities that a reward or penalty will be returned when pulled.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-2"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-3"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arms&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-4"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-5"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_585b5f5006b149099a36b0f03b7fbb62-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;5.4 Reset&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""sets the counts, rewards, total_reward to 0s&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    This lets you re-used the EpsilonGreedy&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-6"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-8"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_d0ea99283ba9467c9cab96e65bb59234-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="pull-arm"&gt;
&lt;h3&gt;5.5 Pull Arm&lt;/h3&gt;
&lt;p&gt;Since we can't give user-defined objects as attributes of the class, this version will be both algorithm and bandit.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""gets the reward&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index for the arm-probability array&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     int: reward or no reward&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_55930c8fd4c84c6a9403906b8854a5d3-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;5.6 Update&lt;/h3&gt;
&lt;p&gt;The update method pulls the arm whose index it is given and then updates the count and reward. Here we're calling the &lt;tt class="docutils literal"&gt;pull_arm&lt;/tt&gt; method instead of using a &lt;tt class="docutils literal"&gt;BernoulliArm&lt;/tt&gt; so we can't re-use the original method.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_97b6389b3f044909854125e9802215da-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""pulls the arm and updates the value&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;     arm (int): index of the arm to pull&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-7"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;average_reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull_arm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-11"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_reward&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-12"&gt;&lt;/a&gt;    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;average_reward&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-13"&gt;&lt;/a&gt;                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_97b6389b3f044909854125e9802215da-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;6 References&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://necromuralist.github.io/data_science/posts/The-Epsilon-Greedy-Algorithm/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Bandit Algorithms for Website Optimization by John Myles White. Copyright 2013 John Myles White, 978-1-449-34133-6&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>algorithm reinforcementlearning</category><guid>https://necromuralist.github.io/data_science/posts/The-Epsilon-Greedy-Algorithm/</guid><pubDate>Mon, 31 Jul 2017 01:22:00 GMT</pubDate></item></channel></rss>